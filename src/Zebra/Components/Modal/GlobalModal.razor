@using Zebra.Services.Modal
@using Microsoft.JSInterop
@inject ModalService ModalService
@inject IJSRuntime Js
@implements IDisposable

<dialog @ref="_dialogRef" @onclick="() => _currentTemplate?.Dismiss()">
	<div class="content-container" @onclick:stopPropagation="true">
		<h1>@_currentTemplate?.Title</h1>
		<div class="content-wrapper">
			@_currentTemplate?.TemplateContent
		</div>
	</div>
</dialog>



@code {
	private ElementReference _dialogRef = default!;
	private IJSObjectReference _jsModule = default!;
	private IModalTemplate? _currentTemplate;

	private bool _shown;
	public bool Shown
	{
		get => _shown;
		set {
			if (!_shown && value)
				_jsModule.InvokeVoidAsync("showModal", _dialogRef);
			_shown = value;
		}
	}

	protected override void OnInitialized()
	{
		ModalService.OnOpen += OpenModal;
		ModalService.OnClose += CloseModal;
	}

	public void Dispose()
	{
		ModalService.OnOpen -= OpenModal;
		ModalService.OnClose -= CloseModal;
	}

	private void OpenModal(object? sender, IModalTemplate e)
	{
		_currentTemplate = e;
		Shown = true;

		StateHasChanged();
	}

	private void CloseModal(object? sender, IModalTemplate? e)
	{
		if (e is not null && !ReferenceEquals(e, _currentTemplate))
			throw new InvalidModalException("Modal closed by another modal.");

		Shown = false;
		_jsModule.InvokeVoidAsync("closeModal", _dialogRef);

		StateHasChanged();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		_jsModule = await Js.InvokeAsync<IJSObjectReference>(
			"import", "./_content/Zebra/Components/Modal/GlobalModal.razor.js"
		);
	}
}